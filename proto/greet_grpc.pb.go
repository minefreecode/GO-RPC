// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	SayGreeting(ctx context.Context, in *NoPram, opts ...grpc.CallOption) (*GreetingResponse, error)
	SayGreetingServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (GreetService_SayGreetingServerStreamingClient, error)
	SayGreetingClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayGreetingClientStreamingClient, error)
	SayGreetingBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayGreetingBidirectionalStreamingClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) SayGreeting(ctx context.Context, in *NoPram, opts ...grpc.CallOption) (*GreetingResponse, error) {
	out := new(GreetingResponse)
	err := c.cc.Invoke(ctx, "/greet_service.GreetService/SayGreeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) SayGreetingServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (GreetService_SayGreetingServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/greet_service.GreetService/SayGreetingServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayGreetingServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_SayGreetingServerStreamingClient interface {
	Recv() (*GreetingResponse, error)
	grpc.ClientStream
}

type greetServiceSayGreetingServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayGreetingServerStreamingClient) Recv() (*GreetingResponse, error) {
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) SayGreetingClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayGreetingClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], "/greet_service.GreetService/SayGreetingClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayGreetingClientStreamingClient{stream}
	return x, nil
}

type GreetService_SayGreetingClientStreamingClient interface {
	Send(*GreetingRequest) error
	CloseAndRecv() (*MessagesList, error)
	grpc.ClientStream
}

type greetServiceSayGreetingClientStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayGreetingClientStreamingClient) Send(m *GreetingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceSayGreetingClientStreamingClient) CloseAndRecv() (*MessagesList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessagesList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) SayGreetingBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayGreetingBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], "/greet_service.GreetService/SayGreetingBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayGreetingBidirectionalStreamingClient{stream}
	return x, nil
}

type GreetService_SayGreetingBidirectionalStreamingClient interface {
	Send(*GreetingRequest) error
	Recv() (*GreetingResponse, error)
	grpc.ClientStream
}

type greetServiceSayGreetingBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayGreetingBidirectionalStreamingClient) Send(m *GreetingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceSayGreetingBidirectionalStreamingClient) Recv() (*GreetingResponse, error) {
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	SayGreeting(context.Context, *NoPram) (*GreetingResponse, error)
	SayGreetingServerStreaming(*NamesList, GreetService_SayGreetingServerStreamingServer) error
	SayGreetingClientStreaming(GreetService_SayGreetingClientStreamingServer) error
	SayGreetingBidirectionalStreaming(GreetService_SayGreetingBidirectionalStreamingServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) SayGreeting(context.Context, *NoPram) (*GreetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayGreeting not implemented")
}
func (UnimplementedGreetServiceServer) SayGreetingServerStreaming(*NamesList, GreetService_SayGreetingServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayGreetingServerStreaming not implemented")
}
func (UnimplementedGreetServiceServer) SayGreetingClientStreaming(GreetService_SayGreetingClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayGreetingClientStreaming not implemented")
}
func (UnimplementedGreetServiceServer) SayGreetingBidirectionalStreaming(GreetService_SayGreetingBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayGreetingBidirectionalStreaming not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_SayGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoPram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).SayGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet_service.GreetService/SayGreeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).SayGreeting(ctx, req.(*NoPram))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_SayGreetingServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NamesList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).SayGreetingServerStreaming(m, &greetServiceSayGreetingServerStreamingServer{stream})
}

type GreetService_SayGreetingServerStreamingServer interface {
	Send(*GreetingResponse) error
	grpc.ServerStream
}

type greetServiceSayGreetingServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayGreetingServerStreamingServer) Send(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_SayGreetingClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).SayGreetingClientStreaming(&greetServiceSayGreetingClientStreamingServer{stream})
}

type GreetService_SayGreetingClientStreamingServer interface {
	SendAndClose(*MessagesList) error
	Recv() (*GreetingRequest, error)
	grpc.ServerStream
}

type greetServiceSayGreetingClientStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayGreetingClientStreamingServer) SendAndClose(m *MessagesList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceSayGreetingClientStreamingServer) Recv() (*GreetingRequest, error) {
	m := new(GreetingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_SayGreetingBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).SayGreetingBidirectionalStreaming(&greetServiceSayGreetingBidirectionalStreamingServer{stream})
}

type GreetService_SayGreetingBidirectionalStreamingServer interface {
	Send(*GreetingResponse) error
	Recv() (*GreetingRequest, error)
	grpc.ServerStream
}

type greetServiceSayGreetingBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayGreetingBidirectionalStreamingServer) Send(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceSayGreetingBidirectionalStreamingServer) Recv() (*GreetingRequest, error) {
	m := new(GreetingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_service.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayGreeting",
			Handler:    _GreetService_SayGreeting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayGreetingServerStreaming",
			Handler:       _GreetService_SayGreetingServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayGreetingClientStreaming",
			Handler:       _GreetService_SayGreetingClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayGreetingBidirectionalStreaming",
			Handler:       _GreetService_SayGreetingBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
